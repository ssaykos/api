package api.lang.Thread;
/*
 *  	Program: 특정기능을 목표로 이루어진 함수 프로시져, 메소드 집합 // 
 	Process : 구동중인 프로그램
 		thread 의 집합으로 하나의 exe, com, dll 같은 프로그램을 뜻함
 	프로세스간 자원(메모리=리소스) 을 공유할 수 없다
 		따라서 프로세스를 많이 발생시키면 자원이 바닥남
 */
/*
 	Thread
 	- 반복적으로 동기화하여 실행되는 프로그램의 투틴(투틴: 비슷한 말로 함수)
 	- 메소드 단위의 처리 모듈 , 프로세스의 구성요소
 	- 쓰레드는 많이 발생해도 자원(stack&hip = 메소드 =memory)을 공유함으로 써 프로세스에 비해 시스템에 부담이 적음
 */
/*
 * 	스레드를 구현하는 방법
 * 	1. Thread 클래스를 상속
 * 	2. Runnable 인터페이스를 구현
 * 	- 객체지향적인 방법은 인터페이스를 구현하는것이다.
 */
/*
 * 	스레드 콜백 메소드
 * 	- start() : JVM 이 스케쥴상 이유가 생겻을때 스레드 스케줄상 run()호출
 * 	-run(): 스레드 상태에서 처리 하려고 하는 모든 비지니스 로직이 구현됨.
 * 	-sleep(long second) : 지정된 시간동안 쓰레드를 쉬게하고 그시간이 지나면 다시 작동..1000분의 1초
 * 	-wait() : 현재 스레드 무한대기,notify(), notifyAll(), 메소드로 재실행 시킴
 * 	-suspend(): 일시정지, 재실행은 resume();
 * 	-yield(): 스레드 실행권한을 다른 스레드에 넘김
 * 	-stop(): 스레드 실행 종료
 */
/*
 	단일 스레드
 	- 하나의 자바 프로그램 실행 상태
 	- main()이 대표적인 싱글 스레드
 */
/*
 	멀티 스레드
 	- 하나의 메소드가 실행하는 상태가 아닌 여러개의 메소드가 지속적으로 지원 공유상태에서 실행 하는것
 */
/*
 	콜백 메소드
 	- 메소드를 일정 실행 순서로 미리 등록시켜놓고
 	등록된 순서에 따라 자동적으로 호출하는 메소드
 */
/*
 	교착상태(Dead lock)
 	- 두쓰레드가 lock을 건상태에서 서로 lock이 풀리기를 기다리는 상황으로 프로그래머는
 	 변수와 와일 문 이프문을 사용해서 스레드를 제어해야 함
 */
public class ThreadSyntax {

}
